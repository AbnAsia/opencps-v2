/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.mobilink.backend.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.mobilink.backend.usermgt.model.Partner;
import org.mobilink.backend.usermgt.model.PartnerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Partner service. Represents a row in the &quot;m_partner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PartnerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PartnerImpl}.
 * </p>
 *
 * @author Binhth
 * @see PartnerImpl
 * @see Partner
 * @see PartnerModel
 * @generated
 */
@ProviderType
public class PartnerModelImpl extends BaseModelImpl<Partner>
	implements PartnerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a partner model instance should use the {@link Partner} interface instead.
	 */
	public static final String TABLE_NAME = "m_partner";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "partnerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "telNo", Types.VARCHAR },
			{ "faxNo", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "website", Types.VARCHAR },
			{ "partnerClass", Types.INTEGER },
			{ "accountUserId", Types.BIGINT },
			{ "docFileId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnerClass", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accountUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("docFileId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table m_partner (uuid_ VARCHAR(75) null,partnerId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,address VARCHAR(75) null,telNo VARCHAR(75) null,faxNo VARCHAR(75) null,email VARCHAR(75) null,website VARCHAR(75) null,partnerClass INTEGER,accountUserId LONG,docFileId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table m_partner";
	public static final String ORDER_BY_JPQL = " ORDER BY partner.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY m_partner.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.mobilink.backend.usermgt.model.Partner"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.mobilink.backend.usermgt.model.Partner"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.usermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.mobilink.backend.usermgt.model.Partner"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long NAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.mobilink.backend.usermgt.model.Partner"));

	public PartnerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _partnerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPartnerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _partnerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Partner.class;
	}

	@Override
	public String getModelClassName() {
		return Partner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("partnerId", getPartnerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("address", getAddress());
		attributes.put("telNo", getTelNo());
		attributes.put("faxNo", getFaxNo());
		attributes.put("email", getEmail());
		attributes.put("website", getWebsite());
		attributes.put("partnerClass", getPartnerClass());
		attributes.put("accountUserId", getAccountUserId());
		attributes.put("docFileId", getDocFileId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long partnerId = (Long)attributes.get("partnerId");

		if (partnerId != null) {
			setPartnerId(partnerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String telNo = (String)attributes.get("telNo");

		if (telNo != null) {
			setTelNo(telNo);
		}

		String faxNo = (String)attributes.get("faxNo");

		if (faxNo != null) {
			setFaxNo(faxNo);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String website = (String)attributes.get("website");

		if (website != null) {
			setWebsite(website);
		}

		Integer partnerClass = (Integer)attributes.get("partnerClass");

		if (partnerClass != null) {
			setPartnerClass(partnerClass);
		}

		Long accountUserId = (Long)attributes.get("accountUserId");

		if (accountUserId != null) {
			setAccountUserId(accountUserId);
		}

		String docFileId = (String)attributes.get("docFileId");

		if (docFileId != null) {
			setDocFileId(docFileId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPartnerId() {
		return _partnerId;
	}

	@Override
	public void setPartnerId(long partnerId) {
		_partnerId = partnerId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getTelNo() {
		if (_telNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _telNo;
		}
	}

	@Override
	public void setTelNo(String telNo) {
		_telNo = telNo;
	}

	@Override
	public String getFaxNo() {
		if (_faxNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _faxNo;
		}
	}

	@Override
	public void setFaxNo(String faxNo) {
		_faxNo = faxNo;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getWebsite() {
		if (_website == null) {
			return StringPool.BLANK;
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		_website = website;
	}

	@Override
	public int getPartnerClass() {
		return _partnerClass;
	}

	@Override
	public void setPartnerClass(int partnerClass) {
		_partnerClass = partnerClass;
	}

	@Override
	public long getAccountUserId() {
		return _accountUserId;
	}

	@Override
	public void setAccountUserId(long accountUserId) {
		_accountUserId = accountUserId;
	}

	@Override
	public String getAccountUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAccountUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setAccountUserUuid(String accountUserUuid) {
	}

	@Override
	public String getDocFileId() {
		if (_docFileId == null) {
			return StringPool.BLANK;
		}
		else {
			return _docFileId;
		}
	}

	@Override
	public void setDocFileId(String docFileId) {
		_docFileId = docFileId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Partner.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Partner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Partner toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Partner)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PartnerImpl partnerImpl = new PartnerImpl();

		partnerImpl.setUuid(getUuid());
		partnerImpl.setPartnerId(getPartnerId());
		partnerImpl.setCompanyId(getCompanyId());
		partnerImpl.setGroupId(getGroupId());
		partnerImpl.setUserId(getUserId());
		partnerImpl.setUserName(getUserName());
		partnerImpl.setCreateDate(getCreateDate());
		partnerImpl.setModifiedDate(getModifiedDate());
		partnerImpl.setName(getName());
		partnerImpl.setAddress(getAddress());
		partnerImpl.setTelNo(getTelNo());
		partnerImpl.setFaxNo(getFaxNo());
		partnerImpl.setEmail(getEmail());
		partnerImpl.setWebsite(getWebsite());
		partnerImpl.setPartnerClass(getPartnerClass());
		partnerImpl.setAccountUserId(getAccountUserId());
		partnerImpl.setDocFileId(getDocFileId());

		partnerImpl.resetOriginalValues();

		return partnerImpl;
	}

	@Override
	public int compareTo(Partner partner) {
		int value = 0;

		value = getName().compareTo(partner.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Partner)) {
			return false;
		}

		Partner partner = (Partner)obj;

		long primaryKey = partner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PartnerModelImpl partnerModelImpl = this;

		partnerModelImpl._originalUuid = partnerModelImpl._uuid;

		partnerModelImpl._originalCompanyId = partnerModelImpl._companyId;

		partnerModelImpl._setOriginalCompanyId = false;

		partnerModelImpl._originalGroupId = partnerModelImpl._groupId;

		partnerModelImpl._setOriginalGroupId = false;

		partnerModelImpl._setModifiedDate = false;

		partnerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Partner> toCacheModel() {
		PartnerCacheModel partnerCacheModel = new PartnerCacheModel();

		partnerCacheModel.uuid = getUuid();

		String uuid = partnerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			partnerCacheModel.uuid = null;
		}

		partnerCacheModel.partnerId = getPartnerId();

		partnerCacheModel.companyId = getCompanyId();

		partnerCacheModel.groupId = getGroupId();

		partnerCacheModel.userId = getUserId();

		partnerCacheModel.userName = getUserName();

		String userName = partnerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			partnerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			partnerCacheModel.createDate = createDate.getTime();
		}
		else {
			partnerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			partnerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			partnerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		partnerCacheModel.name = getName();

		String name = partnerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			partnerCacheModel.name = null;
		}

		partnerCacheModel.address = getAddress();

		String address = partnerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			partnerCacheModel.address = null;
		}

		partnerCacheModel.telNo = getTelNo();

		String telNo = partnerCacheModel.telNo;

		if ((telNo != null) && (telNo.length() == 0)) {
			partnerCacheModel.telNo = null;
		}

		partnerCacheModel.faxNo = getFaxNo();

		String faxNo = partnerCacheModel.faxNo;

		if ((faxNo != null) && (faxNo.length() == 0)) {
			partnerCacheModel.faxNo = null;
		}

		partnerCacheModel.email = getEmail();

		String email = partnerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			partnerCacheModel.email = null;
		}

		partnerCacheModel.website = getWebsite();

		String website = partnerCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			partnerCacheModel.website = null;
		}

		partnerCacheModel.partnerClass = getPartnerClass();

		partnerCacheModel.accountUserId = getAccountUserId();

		partnerCacheModel.docFileId = getDocFileId();

		String docFileId = partnerCacheModel.docFileId;

		if ((docFileId != null) && (docFileId.length() == 0)) {
			partnerCacheModel.docFileId = null;
		}

		return partnerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", partnerId=");
		sb.append(getPartnerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", telNo=");
		sb.append(getTelNo());
		sb.append(", faxNo=");
		sb.append(getFaxNo());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", website=");
		sb.append(getWebsite());
		sb.append(", partnerClass=");
		sb.append(getPartnerClass());
		sb.append(", accountUserId=");
		sb.append(getAccountUserId());
		sb.append(", docFileId=");
		sb.append(getDocFileId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("org.mobilink.backend.usermgt.model.Partner");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partnerId</column-name><column-value><![CDATA[");
		sb.append(getPartnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telNo</column-name><column-value><![CDATA[");
		sb.append(getTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>faxNo</column-name><column-value><![CDATA[");
		sb.append(getFaxNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>website</column-name><column-value><![CDATA[");
		sb.append(getWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partnerClass</column-name><column-value><![CDATA[");
		sb.append(getPartnerClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountUserId</column-name><column-value><![CDATA[");
		sb.append(getAccountUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docFileId</column-name><column-value><![CDATA[");
		sb.append(getDocFileId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Partner.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Partner.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _partnerId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _address;
	private String _telNo;
	private String _faxNo;
	private String _email;
	private String _website;
	private int _partnerClass;
	private long _accountUserId;
	private String _docFileId;
	private long _columnBitmask;
	private Partner _escapedModel;
}