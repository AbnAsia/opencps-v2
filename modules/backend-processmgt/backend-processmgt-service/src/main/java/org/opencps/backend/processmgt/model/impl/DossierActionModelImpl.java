/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.backend.processmgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import org.opencps.backend.processmgt.model.DossierAction;
import org.opencps.backend.processmgt.model.DossierActionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierAction service. Represents a row in the &quot;opencps_dossieraction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierActionImpl}.
 * </p>
 *
 * @author khoavu
 * @see DossierActionImpl
 * @see DossierAction
 * @see DossierActionModel
 * @generated
 */
@ProviderType
public class DossierActionModelImpl extends BaseModelImpl<DossierAction>
	implements DossierActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier action model instance should use the {@link DossierAction} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossieraction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierActionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "serviceProcessId", Types.BIGINT },
			{ "previousActionId", Types.BIGINT },
			{ "actionCode", Types.VARCHAR },
			{ "actionUser", Types.VARCHAR },
			{ "actionName", Types.VARCHAR },
			{ "actionNote", Types.VARCHAR },
			{ "overDue", Types.INTEGER },
			{ "syncActionCode", Types.VARCHAR },
			{ "pending", Types.VARCHAR },
			{ "rollback", Types.VARCHAR },
			{ "processStepId", Types.BIGINT },
			{ "dueDate", Types.INTEGER },
			{ "nextActionId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("previousActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overDue", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("syncActionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pending", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rollback", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processStepId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dueDate", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nextActionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossieraction (uuid_ VARCHAR(75) null,dossierActionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dossierId LONG,serviceProcessId LONG,previousActionId LONG,actionCode VARCHAR(75) null,actionUser VARCHAR(75) null,actionName VARCHAR(75) null,actionNote VARCHAR(75) null,overDue INTEGER,syncActionCode VARCHAR(75) null,pending VARCHAR(75) null,rollback VARCHAR(75) null,processStepId LONG,dueDate INTEGER,nextActionId LONG)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossieraction";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierAction.dossierActionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossieraction.dossierActionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.processmgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.backend.processmgt.model.DossierAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.processmgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.backend.processmgt.model.DossierAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.processmgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.backend.processmgt.model.DossierAction"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long DOSSIERACTIONID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.processmgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.backend.processmgt.model.DossierAction"));

	public DossierActionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierActionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierActionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierActionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierAction.class;
	}

	@Override
	public String getModelClassName() {
		return DossierAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierActionId", getDossierActionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("serviceProcessId", getServiceProcessId());
		attributes.put("previousActionId", getPreviousActionId());
		attributes.put("actionCode", getActionCode());
		attributes.put("actionUser", getActionUser());
		attributes.put("actionName", getActionName());
		attributes.put("actionNote", getActionNote());
		attributes.put("overDue", getOverDue());
		attributes.put("syncActionCode", getSyncActionCode());
		attributes.put("pending", getPending());
		attributes.put("rollback", getRollback());
		attributes.put("processStepId", getProcessStepId());
		attributes.put("dueDate", getDueDate());
		attributes.put("nextActionId", getNextActionId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierActionId = (Long)attributes.get("dossierActionId");

		if (dossierActionId != null) {
			setDossierActionId(dossierActionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long serviceProcessId = (Long)attributes.get("serviceProcessId");

		if (serviceProcessId != null) {
			setServiceProcessId(serviceProcessId);
		}

		Long previousActionId = (Long)attributes.get("previousActionId");

		if (previousActionId != null) {
			setPreviousActionId(previousActionId);
		}

		String actionCode = (String)attributes.get("actionCode");

		if (actionCode != null) {
			setActionCode(actionCode);
		}

		String actionUser = (String)attributes.get("actionUser");

		if (actionUser != null) {
			setActionUser(actionUser);
		}

		String actionName = (String)attributes.get("actionName");

		if (actionName != null) {
			setActionName(actionName);
		}

		String actionNote = (String)attributes.get("actionNote");

		if (actionNote != null) {
			setActionNote(actionNote);
		}

		Integer overDue = (Integer)attributes.get("overDue");

		if (overDue != null) {
			setOverDue(overDue);
		}

		String syncActionCode = (String)attributes.get("syncActionCode");

		if (syncActionCode != null) {
			setSyncActionCode(syncActionCode);
		}

		String pending = (String)attributes.get("pending");

		if (pending != null) {
			setPending(pending);
		}

		String rollback = (String)attributes.get("rollback");

		if (rollback != null) {
			setRollback(rollback);
		}

		Long processStepId = (Long)attributes.get("processStepId");

		if (processStepId != null) {
			setProcessStepId(processStepId);
		}

		Integer dueDate = (Integer)attributes.get("dueDate");

		if (dueDate != null) {
			setDueDate(dueDate);
		}

		Long nextActionId = (Long)attributes.get("nextActionId");

		if (nextActionId != null) {
			setNextActionId(nextActionId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierActionId() {
		return _dossierActionId;
	}

	@Override
	public void setDossierActionId(long dossierActionId) {
		_dossierActionId = dossierActionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@Override
	public long getServiceProcessId() {
		return _serviceProcessId;
	}

	@Override
	public void setServiceProcessId(long serviceProcessId) {
		_serviceProcessId = serviceProcessId;
	}

	@Override
	public long getPreviousActionId() {
		return _previousActionId;
	}

	@Override
	public void setPreviousActionId(long previousActionId) {
		_previousActionId = previousActionId;
	}

	@Override
	public String getActionCode() {
		if (_actionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionCode;
		}
	}

	@Override
	public void setActionCode(String actionCode) {
		_actionCode = actionCode;
	}

	@Override
	public String getActionUser() {
		if (_actionUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionUser;
		}
	}

	@Override
	public void setActionUser(String actionUser) {
		_actionUser = actionUser;
	}

	@Override
	public String getActionName() {
		if (_actionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionName;
		}
	}

	@Override
	public void setActionName(String actionName) {
		_actionName = actionName;
	}

	@Override
	public String getActionNote() {
		if (_actionNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _actionNote;
		}
	}

	@Override
	public void setActionNote(String actionNote) {
		_actionNote = actionNote;
	}

	@Override
	public int getOverDue() {
		return _overDue;
	}

	@Override
	public void setOverDue(int overDue) {
		_overDue = overDue;
	}

	@Override
	public String getSyncActionCode() {
		if (_syncActionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncActionCode;
		}
	}

	@Override
	public void setSyncActionCode(String syncActionCode) {
		_syncActionCode = syncActionCode;
	}

	@Override
	public String getPending() {
		if (_pending == null) {
			return StringPool.BLANK;
		}
		else {
			return _pending;
		}
	}

	@Override
	public void setPending(String pending) {
		_pending = pending;
	}

	@Override
	public String getRollback() {
		if (_rollback == null) {
			return StringPool.BLANK;
		}
		else {
			return _rollback;
		}
	}

	@Override
	public void setRollback(String rollback) {
		_rollback = rollback;
	}

	@Override
	public long getProcessStepId() {
		return _processStepId;
	}

	@Override
	public void setProcessStepId(long processStepId) {
		_processStepId = processStepId;
	}

	@Override
	public int getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(int dueDate) {
		_dueDate = dueDate;
	}

	@Override
	public long getNextActionId() {
		return _nextActionId;
	}

	@Override
	public void setNextActionId(long nextActionId) {
		_nextActionId = nextActionId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DossierAction.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierAction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierActionImpl dossierActionImpl = new DossierActionImpl();

		dossierActionImpl.setUuid(getUuid());
		dossierActionImpl.setDossierActionId(getDossierActionId());
		dossierActionImpl.setCompanyId(getCompanyId());
		dossierActionImpl.setGroupId(getGroupId());
		dossierActionImpl.setUserId(getUserId());
		dossierActionImpl.setUserName(getUserName());
		dossierActionImpl.setCreateDate(getCreateDate());
		dossierActionImpl.setModifiedDate(getModifiedDate());
		dossierActionImpl.setDossierId(getDossierId());
		dossierActionImpl.setServiceProcessId(getServiceProcessId());
		dossierActionImpl.setPreviousActionId(getPreviousActionId());
		dossierActionImpl.setActionCode(getActionCode());
		dossierActionImpl.setActionUser(getActionUser());
		dossierActionImpl.setActionName(getActionName());
		dossierActionImpl.setActionNote(getActionNote());
		dossierActionImpl.setOverDue(getOverDue());
		dossierActionImpl.setSyncActionCode(getSyncActionCode());
		dossierActionImpl.setPending(getPending());
		dossierActionImpl.setRollback(getRollback());
		dossierActionImpl.setProcessStepId(getProcessStepId());
		dossierActionImpl.setDueDate(getDueDate());
		dossierActionImpl.setNextActionId(getNextActionId());

		dossierActionImpl.resetOriginalValues();

		return dossierActionImpl;
	}

	@Override
	public int compareTo(DossierAction dossierAction) {
		long primaryKey = dossierAction.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierAction)) {
			return false;
		}

		DossierAction dossierAction = (DossierAction)obj;

		long primaryKey = dossierAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierActionModelImpl dossierActionModelImpl = this;

		dossierActionModelImpl._originalUuid = dossierActionModelImpl._uuid;

		dossierActionModelImpl._originalCompanyId = dossierActionModelImpl._companyId;

		dossierActionModelImpl._setOriginalCompanyId = false;

		dossierActionModelImpl._originalGroupId = dossierActionModelImpl._groupId;

		dossierActionModelImpl._setOriginalGroupId = false;

		dossierActionModelImpl._setModifiedDate = false;

		dossierActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierAction> toCacheModel() {
		DossierActionCacheModel dossierActionCacheModel = new DossierActionCacheModel();

		dossierActionCacheModel.uuid = getUuid();

		String uuid = dossierActionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierActionCacheModel.uuid = null;
		}

		dossierActionCacheModel.dossierActionId = getDossierActionId();

		dossierActionCacheModel.companyId = getCompanyId();

		dossierActionCacheModel.groupId = getGroupId();

		dossierActionCacheModel.userId = getUserId();

		dossierActionCacheModel.userName = getUserName();

		String userName = dossierActionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dossierActionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierActionCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierActionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierActionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierActionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierActionCacheModel.dossierId = getDossierId();

		dossierActionCacheModel.serviceProcessId = getServiceProcessId();

		dossierActionCacheModel.previousActionId = getPreviousActionId();

		dossierActionCacheModel.actionCode = getActionCode();

		String actionCode = dossierActionCacheModel.actionCode;

		if ((actionCode != null) && (actionCode.length() == 0)) {
			dossierActionCacheModel.actionCode = null;
		}

		dossierActionCacheModel.actionUser = getActionUser();

		String actionUser = dossierActionCacheModel.actionUser;

		if ((actionUser != null) && (actionUser.length() == 0)) {
			dossierActionCacheModel.actionUser = null;
		}

		dossierActionCacheModel.actionName = getActionName();

		String actionName = dossierActionCacheModel.actionName;

		if ((actionName != null) && (actionName.length() == 0)) {
			dossierActionCacheModel.actionName = null;
		}

		dossierActionCacheModel.actionNote = getActionNote();

		String actionNote = dossierActionCacheModel.actionNote;

		if ((actionNote != null) && (actionNote.length() == 0)) {
			dossierActionCacheModel.actionNote = null;
		}

		dossierActionCacheModel.overDue = getOverDue();

		dossierActionCacheModel.syncActionCode = getSyncActionCode();

		String syncActionCode = dossierActionCacheModel.syncActionCode;

		if ((syncActionCode != null) && (syncActionCode.length() == 0)) {
			dossierActionCacheModel.syncActionCode = null;
		}

		dossierActionCacheModel.pending = getPending();

		String pending = dossierActionCacheModel.pending;

		if ((pending != null) && (pending.length() == 0)) {
			dossierActionCacheModel.pending = null;
		}

		dossierActionCacheModel.rollback = getRollback();

		String rollback = dossierActionCacheModel.rollback;

		if ((rollback != null) && (rollback.length() == 0)) {
			dossierActionCacheModel.rollback = null;
		}

		dossierActionCacheModel.processStepId = getProcessStepId();

		dossierActionCacheModel.dueDate = getDueDate();

		dossierActionCacheModel.nextActionId = getNextActionId();

		return dossierActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierActionId=");
		sb.append(getDossierActionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", serviceProcessId=");
		sb.append(getServiceProcessId());
		sb.append(", previousActionId=");
		sb.append(getPreviousActionId());
		sb.append(", actionCode=");
		sb.append(getActionCode());
		sb.append(", actionUser=");
		sb.append(getActionUser());
		sb.append(", actionName=");
		sb.append(getActionName());
		sb.append(", actionNote=");
		sb.append(getActionNote());
		sb.append(", overDue=");
		sb.append(getOverDue());
		sb.append(", syncActionCode=");
		sb.append(getSyncActionCode());
		sb.append(", pending=");
		sb.append(getPending());
		sb.append(", rollback=");
		sb.append(getRollback());
		sb.append(", processStepId=");
		sb.append(getProcessStepId());
		sb.append(", dueDate=");
		sb.append(getDueDate());
		sb.append(", nextActionId=");
		sb.append(getNextActionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("org.opencps.backend.processmgt.model.DossierAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierActionId</column-name><column-value><![CDATA[");
		sb.append(getDossierActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceProcessId</column-name><column-value><![CDATA[");
		sb.append(getServiceProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousActionId</column-name><column-value><![CDATA[");
		sb.append(getPreviousActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionCode</column-name><column-value><![CDATA[");
		sb.append(getActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionUser</column-name><column-value><![CDATA[");
		sb.append(getActionUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionName</column-name><column-value><![CDATA[");
		sb.append(getActionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionNote</column-name><column-value><![CDATA[");
		sb.append(getActionNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overDue</column-name><column-value><![CDATA[");
		sb.append(getOverDue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncActionCode</column-name><column-value><![CDATA[");
		sb.append(getSyncActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pending</column-name><column-value><![CDATA[");
		sb.append(getPending());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rollback</column-name><column-value><![CDATA[");
		sb.append(getRollback());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processStepId</column-name><column-value><![CDATA[");
		sb.append(getProcessStepId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dueDate</column-name><column-value><![CDATA[");
		sb.append(getDueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextActionId</column-name><column-value><![CDATA[");
		sb.append(getNextActionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierAction.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierAction.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierActionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private long _serviceProcessId;
	private long _previousActionId;
	private String _actionCode;
	private String _actionUser;
	private String _actionName;
	private String _actionNote;
	private int _overDue;
	private String _syncActionCode;
	private String _pending;
	private String _rollback;
	private long _processStepId;
	private int _dueDate;
	private long _nextActionId;
	private long _columnBitmask;
	private DossierAction _escapedModel;
}