/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.backend.processmgt.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import org.opencps.backend.processmgt.model.ServiceProcess;
import org.opencps.backend.processmgt.service.ServiceProcessLocalService;
import org.opencps.backend.processmgt.service.persistence.DossierActionPersistence;
import org.opencps.backend.processmgt.service.persistence.DossierActionUserPersistence;
import org.opencps.backend.processmgt.service.persistence.ProcessActionPersistence;
import org.opencps.backend.processmgt.service.persistence.ProcessStepPersistence;
import org.opencps.backend.processmgt.service.persistence.ServiceProcessPersistence;
import org.opencps.backend.processmgt.service.persistence.StepAllowancePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the service process local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.opencps.backend.processmgt.service.impl.ServiceProcessLocalServiceImpl}.
 * </p>
 *
 * @author khoavu
 * @see org.opencps.backend.processmgt.service.impl.ServiceProcessLocalServiceImpl
 * @see org.opencps.backend.processmgt.service.ServiceProcessLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ServiceProcessLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ServiceProcessLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.opencps.backend.processmgt.service.ServiceProcessLocalServiceUtil} to access the service process local service.
	 */

	/**
	 * Adds the service process to the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProcess the service process
	 * @return the service process that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ServiceProcess addServiceProcess(ServiceProcess serviceProcess) {
		serviceProcess.setNew(true);

		return serviceProcessPersistence.update(serviceProcess);
	}

	/**
	 * Creates a new service process with the primary key. Does not add the service process to the database.
	 *
	 * @param serviceProcessId the primary key for the new service process
	 * @return the new service process
	 */
	@Override
	public ServiceProcess createServiceProcess(long serviceProcessId) {
		return serviceProcessPersistence.create(serviceProcessId);
	}

	/**
	 * Deletes the service process with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProcessId the primary key of the service process
	 * @return the service process that was removed
	 * @throws PortalException if a service process with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ServiceProcess deleteServiceProcess(long serviceProcessId)
		throws PortalException {
		return serviceProcessPersistence.remove(serviceProcessId);
	}

	/**
	 * Deletes the service process from the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProcess the service process
	 * @return the service process that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ServiceProcess deleteServiceProcess(ServiceProcess serviceProcess) {
		return serviceProcessPersistence.remove(serviceProcess);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ServiceProcess.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return serviceProcessPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.backend.processmgt.model.impl.ServiceProcessModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return serviceProcessPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.backend.processmgt.model.impl.ServiceProcessModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return serviceProcessPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return serviceProcessPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return serviceProcessPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ServiceProcess fetchServiceProcess(long serviceProcessId) {
		return serviceProcessPersistence.fetchByPrimaryKey(serviceProcessId);
	}

	/**
	 * Returns the service process matching the UUID and group.
	 *
	 * @param uuid the service process's UUID
	 * @param groupId the primary key of the group
	 * @return the matching service process, or <code>null</code> if a matching service process could not be found
	 */
	@Override
	public ServiceProcess fetchServiceProcessByUuidAndGroupId(String uuid,
		long groupId) {
		return serviceProcessPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the service process with the primary key.
	 *
	 * @param serviceProcessId the primary key of the service process
	 * @return the service process
	 * @throws PortalException if a service process with the primary key could not be found
	 */
	@Override
	public ServiceProcess getServiceProcess(long serviceProcessId)
		throws PortalException {
		return serviceProcessPersistence.findByPrimaryKey(serviceProcessId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(serviceProcessLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ServiceProcess.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("serviceProcessId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(serviceProcessLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ServiceProcess.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"serviceProcessId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(serviceProcessLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ServiceProcess.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("serviceProcessId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<ServiceProcess>() {
				@Override
				public void performAction(ServiceProcess serviceProcess)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						serviceProcess);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(ServiceProcess.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return serviceProcessLocalService.deleteServiceProcess((ServiceProcess)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return serviceProcessPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the service processes matching the UUID and company.
	 *
	 * @param uuid the UUID of the service processes
	 * @param companyId the primary key of the company
	 * @return the matching service processes, or an empty list if no matches were found
	 */
	@Override
	public List<ServiceProcess> getServiceProcessesByUuidAndCompanyId(
		String uuid, long companyId) {
		return serviceProcessPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of service processes matching the UUID and company.
	 *
	 * @param uuid the UUID of the service processes
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of service processes
	 * @param end the upper bound of the range of service processes (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching service processes, or an empty list if no matches were found
	 */
	@Override
	public List<ServiceProcess> getServiceProcessesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<ServiceProcess> orderByComparator) {
		return serviceProcessPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the service process matching the UUID and group.
	 *
	 * @param uuid the service process's UUID
	 * @param groupId the primary key of the group
	 * @return the matching service process
	 * @throws PortalException if a matching service process could not be found
	 */
	@Override
	public ServiceProcess getServiceProcessByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return serviceProcessPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the service processes.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.backend.processmgt.model.impl.ServiceProcessModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of service processes
	 * @param end the upper bound of the range of service processes (not inclusive)
	 * @return the range of service processes
	 */
	@Override
	public List<ServiceProcess> getServiceProcesses(int start, int end) {
		return serviceProcessPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of service processes.
	 *
	 * @return the number of service processes
	 */
	@Override
	public int getServiceProcessesCount() {
		return serviceProcessPersistence.countAll();
	}

	/**
	 * Updates the service process in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProcess the service process
	 * @return the service process that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ServiceProcess updateServiceProcess(ServiceProcess serviceProcess) {
		return serviceProcessPersistence.update(serviceProcess);
	}

	/**
	 * Returns the dossier action local service.
	 *
	 * @return the dossier action local service
	 */
	public org.opencps.backend.processmgt.service.DossierActionLocalService getDossierActionLocalService() {
		return dossierActionLocalService;
	}

	/**
	 * Sets the dossier action local service.
	 *
	 * @param dossierActionLocalService the dossier action local service
	 */
	public void setDossierActionLocalService(
		org.opencps.backend.processmgt.service.DossierActionLocalService dossierActionLocalService) {
		this.dossierActionLocalService = dossierActionLocalService;
	}

	/**
	 * Returns the dossier action persistence.
	 *
	 * @return the dossier action persistence
	 */
	public DossierActionPersistence getDossierActionPersistence() {
		return dossierActionPersistence;
	}

	/**
	 * Sets the dossier action persistence.
	 *
	 * @param dossierActionPersistence the dossier action persistence
	 */
	public void setDossierActionPersistence(
		DossierActionPersistence dossierActionPersistence) {
		this.dossierActionPersistence = dossierActionPersistence;
	}

	/**
	 * Returns the dossier action user local service.
	 *
	 * @return the dossier action user local service
	 */
	public org.opencps.backend.processmgt.service.DossierActionUserLocalService getDossierActionUserLocalService() {
		return dossierActionUserLocalService;
	}

	/**
	 * Sets the dossier action user local service.
	 *
	 * @param dossierActionUserLocalService the dossier action user local service
	 */
	public void setDossierActionUserLocalService(
		org.opencps.backend.processmgt.service.DossierActionUserLocalService dossierActionUserLocalService) {
		this.dossierActionUserLocalService = dossierActionUserLocalService;
	}

	/**
	 * Returns the dossier action user persistence.
	 *
	 * @return the dossier action user persistence
	 */
	public DossierActionUserPersistence getDossierActionUserPersistence() {
		return dossierActionUserPersistence;
	}

	/**
	 * Sets the dossier action user persistence.
	 *
	 * @param dossierActionUserPersistence the dossier action user persistence
	 */
	public void setDossierActionUserPersistence(
		DossierActionUserPersistence dossierActionUserPersistence) {
		this.dossierActionUserPersistence = dossierActionUserPersistence;
	}

	/**
	 * Returns the process action local service.
	 *
	 * @return the process action local service
	 */
	public org.opencps.backend.processmgt.service.ProcessActionLocalService getProcessActionLocalService() {
		return processActionLocalService;
	}

	/**
	 * Sets the process action local service.
	 *
	 * @param processActionLocalService the process action local service
	 */
	public void setProcessActionLocalService(
		org.opencps.backend.processmgt.service.ProcessActionLocalService processActionLocalService) {
		this.processActionLocalService = processActionLocalService;
	}

	/**
	 * Returns the process action persistence.
	 *
	 * @return the process action persistence
	 */
	public ProcessActionPersistence getProcessActionPersistence() {
		return processActionPersistence;
	}

	/**
	 * Sets the process action persistence.
	 *
	 * @param processActionPersistence the process action persistence
	 */
	public void setProcessActionPersistence(
		ProcessActionPersistence processActionPersistence) {
		this.processActionPersistence = processActionPersistence;
	}

	/**
	 * Returns the process step local service.
	 *
	 * @return the process step local service
	 */
	public org.opencps.backend.processmgt.service.ProcessStepLocalService getProcessStepLocalService() {
		return processStepLocalService;
	}

	/**
	 * Sets the process step local service.
	 *
	 * @param processStepLocalService the process step local service
	 */
	public void setProcessStepLocalService(
		org.opencps.backend.processmgt.service.ProcessStepLocalService processStepLocalService) {
		this.processStepLocalService = processStepLocalService;
	}

	/**
	 * Returns the process step persistence.
	 *
	 * @return the process step persistence
	 */
	public ProcessStepPersistence getProcessStepPersistence() {
		return processStepPersistence;
	}

	/**
	 * Sets the process step persistence.
	 *
	 * @param processStepPersistence the process step persistence
	 */
	public void setProcessStepPersistence(
		ProcessStepPersistence processStepPersistence) {
		this.processStepPersistence = processStepPersistence;
	}

	/**
	 * Returns the service process local service.
	 *
	 * @return the service process local service
	 */
	public ServiceProcessLocalService getServiceProcessLocalService() {
		return serviceProcessLocalService;
	}

	/**
	 * Sets the service process local service.
	 *
	 * @param serviceProcessLocalService the service process local service
	 */
	public void setServiceProcessLocalService(
		ServiceProcessLocalService serviceProcessLocalService) {
		this.serviceProcessLocalService = serviceProcessLocalService;
	}

	/**
	 * Returns the service process persistence.
	 *
	 * @return the service process persistence
	 */
	public ServiceProcessPersistence getServiceProcessPersistence() {
		return serviceProcessPersistence;
	}

	/**
	 * Sets the service process persistence.
	 *
	 * @param serviceProcessPersistence the service process persistence
	 */
	public void setServiceProcessPersistence(
		ServiceProcessPersistence serviceProcessPersistence) {
		this.serviceProcessPersistence = serviceProcessPersistence;
	}

	/**
	 * Returns the step allowance local service.
	 *
	 * @return the step allowance local service
	 */
	public org.opencps.backend.processmgt.service.StepAllowanceLocalService getStepAllowanceLocalService() {
		return stepAllowanceLocalService;
	}

	/**
	 * Sets the step allowance local service.
	 *
	 * @param stepAllowanceLocalService the step allowance local service
	 */
	public void setStepAllowanceLocalService(
		org.opencps.backend.processmgt.service.StepAllowanceLocalService stepAllowanceLocalService) {
		this.stepAllowanceLocalService = stepAllowanceLocalService;
	}

	/**
	 * Returns the step allowance persistence.
	 *
	 * @return the step allowance persistence
	 */
	public StepAllowancePersistence getStepAllowancePersistence() {
		return stepAllowancePersistence;
	}

	/**
	 * Sets the step allowance persistence.
	 *
	 * @param stepAllowancePersistence the step allowance persistence
	 */
	public void setStepAllowancePersistence(
		StepAllowancePersistence stepAllowancePersistence) {
		this.stepAllowancePersistence = stepAllowancePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("org.opencps.backend.processmgt.model.ServiceProcess",
			serviceProcessLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"org.opencps.backend.processmgt.model.ServiceProcess");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ServiceProcessLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ServiceProcess.class;
	}

	protected String getModelClassName() {
		return ServiceProcess.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = serviceProcessPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.opencps.backend.processmgt.service.DossierActionLocalService.class)
	protected org.opencps.backend.processmgt.service.DossierActionLocalService dossierActionLocalService;
	@BeanReference(type = DossierActionPersistence.class)
	protected DossierActionPersistence dossierActionPersistence;
	@BeanReference(type = org.opencps.backend.processmgt.service.DossierActionUserLocalService.class)
	protected org.opencps.backend.processmgt.service.DossierActionUserLocalService dossierActionUserLocalService;
	@BeanReference(type = DossierActionUserPersistence.class)
	protected DossierActionUserPersistence dossierActionUserPersistence;
	@BeanReference(type = org.opencps.backend.processmgt.service.ProcessActionLocalService.class)
	protected org.opencps.backend.processmgt.service.ProcessActionLocalService processActionLocalService;
	@BeanReference(type = ProcessActionPersistence.class)
	protected ProcessActionPersistence processActionPersistence;
	@BeanReference(type = org.opencps.backend.processmgt.service.ProcessStepLocalService.class)
	protected org.opencps.backend.processmgt.service.ProcessStepLocalService processStepLocalService;
	@BeanReference(type = ProcessStepPersistence.class)
	protected ProcessStepPersistence processStepPersistence;
	@BeanReference(type = ServiceProcessLocalService.class)
	protected ServiceProcessLocalService serviceProcessLocalService;
	@BeanReference(type = ServiceProcessPersistence.class)
	protected ServiceProcessPersistence serviceProcessPersistence;
	@BeanReference(type = org.opencps.backend.processmgt.service.StepAllowanceLocalService.class)
	protected org.opencps.backend.processmgt.service.StepAllowanceLocalService stepAllowanceLocalService;
	@BeanReference(type = StepAllowancePersistence.class)
	protected StepAllowancePersistence stepAllowancePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}